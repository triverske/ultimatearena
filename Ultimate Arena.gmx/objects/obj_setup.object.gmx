<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.VERSION = "4.11";

global.ENDLESS = 0;
global.SAVE_SPEED = 12;
global.loadingGame = 0;
global.saveFile = "";

global.TAGS = 0;
global.TAG_COUNT = 0;
global.TAG_LIST[0,0] = 0;

global.eventRadius = 100;
global.CREDITS = 0;
global.INSANE = 0;
global.FACEBOOK = 0;
global.TWITTER = 0;
global.GITHUB = 0;
global.DAYS = 0;
global.WILD_RIDE = 0;
global.LANDMINE_KILLS = 0;
global.update_count = 0;
global.kill_count = 0;
global.TIME_DAYS = 0;
global.gs = 2;
global.arenaShrink = 1;
global.uploadImage = -1;
global.SECTIONS = 59;
draw_set_circle_precision(64);

global.createdWorkshopItems = -1;
global.createdWorkshopItemsCount = 0;

unset = true;

new_item = -1;

ini_open("settings.ini")
var v = ini_read_real("settings","version",1);
var ac = ini_read_real("settings","addcharacters",1);
ini_close();

if(v &lt; 4.1)
{
    file_delete("settings.ini");
    ini_open("settings.ini");
    ini_write_real("settings","version",global.VERSION);
    ini_write_real("settings","addcharacters",ac);
    ini_close();
}


initialize_workshop();

draw_set_font(font0);
if(directory_exists(working_directory + "characters"))
{
    //OLD FORMAT CONVERTER - I'm so sorry.
    var f = file_find_first(working_directory + "characters\*.ini", 0);
    if(f != "")
    {
        //show_debug_message(working_directory + "characters\" + f);
        var a = file_text_open_read(working_directory + "characters\" + f)
        var s = 0;
        var z = 0;
        s[0] = "";
        while(!file_text_eof(a))
        {
            s[z] = file_text_read_string(a);
            file_text_readln(a);
            z++;
        }
        file_text_close(a);
        
        var dir = string_extract(f,".",0)
        
        if(file_exists(working_directory + "characters\" + dir + ".png"))
            var spr = sprite_add(working_directory + "characters\" + dir + ".png",0,0,0,0,0);
        else
            var spr = sprite_duplicate(spr_defaultFighterImage);
        
        directory_create(working_directory + "characters\" + dir);
        
        sprite_save(spr,0,working_directory + "characters\" +dir + "\" + dir + ".png");
        sprite_delete(spr);
        
        var a = file_text_open_write(working_directory + "characters\" +dir + "\" + dir + ".ini");
        for(i=0;i&lt;z;i++)
        {
            file_text_write_string(a,s[i]);
            file_text_writeln(a);
        }
        
        file_text_close(a);
        
        file_delete(working_directory + "characters\" + f);
    }
    
    var f = file_find_next();
    while(f != "")
    {
        //show_debug_message(working_directory + "characters\" + f);
        var a = file_text_open_read(working_directory + "characters\" + f)
        var s = 0;
        var z = 0;
        s[0] = "";
        while(!file_text_eof(a))
        {
            s[z] = file_text_read_string(a);
            file_text_readln(a);
            z++;
        }
        file_text_close(a);
        
        var dir = string_extract(f,".",0)
        
        if(file_exists(working_directory + "characters\" + dir + ".png"))
            var spr = sprite_add(working_directory + "characters\" + dir + ".png",0,0,0,0,0);
        else
            var spr = sprite_duplicate(spr_defaultFighterImage);
        
        directory_create(working_directory + "characters\" + dir);
        
        sprite_save(spr,0,working_directory + "characters\" +dir + "\" + dir + ".png");
        sprite_delete(spr);
        
        var a = file_text_open_write(working_directory + "characters\" +dir + "\" + dir + ".ini");
        for(i=0;i&lt;z;i++)
        {
            file_text_write_string(a,s[i]);
            file_text_writeln(a);
        }
        
        file_text_close(a);
        
        file_delete(working_directory + "characters\" + f);
        var f = file_find_next();
    }
    file_find_close();
    
    global.cIMAGES = 0;
    initialize_characters();
}
else
{
    global.cIMAGES = 0;
    directory_create("characters");
    add_default_characters();
    initialize_characters();
}

if(directory_exists(working_directory + "events"))
{
    //OLD FORMAT CONVERTER
    var f = file_find_first(working_directory + "events\*.ini", 0);
    if(f != "")
    {
        //show_debug_message(working_directory + "events\" + f);
        var a = file_text_open_read(working_directory + "events\" + f)
        var s = 0;
        var z = 0;
        s[0] = "";
        while(!file_text_eof(a))
        {
            s[z] = file_text_read_string(a);
            file_text_readln(a);
            z++;
        }
        file_text_close(a);
        
        var dir = string_extract(f,".",0)
        directory_create(working_directory + "events\" + dir);
        
        var a = file_text_open_write(working_directory + "events\" +dir + "\" + dir + ".ini");
        for(i=0;i&lt;z;i++)
        {
            file_text_write_string(a,s[i]);
            file_text_writeln(a);
        }
        
        file_text_close(a);
        
        file_delete(working_directory + "events\" + f);
    }
    
    var f = file_find_next();
    while(f != "")
    {
        //show_debug_message(working_directory + "events\" + f);
        var a = file_text_open_read(working_directory + "events\" + f)
        var s = 0;
        var z = 0;
        s[0] = "";
        while(!file_text_eof(a))
        {
            s[z] = file_text_read_string(a);
            file_text_readln(a);
            z++;
        }
        file_text_close(a);
        
        var dir = string_extract(f,".",0)
        directory_create(working_directory + "events\" + dir);
        
        var a = file_text_open_write(working_directory + "events\" +dir + "\" + dir + ".ini");
        for(i=0;i&lt;z;i++)
        {
            file_text_write_string(a,s[i]);
            file_text_writeln(a);
        }
        
        file_text_close(a);
        
        file_delete(working_directory + "events\" + f);
        var f = file_find_next();
    }
    file_find_close();
    initialize_events();
}
else
{
    directory_create("events");
    add_default_events();
    initialize_events();

}

if(directory_exists(working_directory + "maps"))
{
    initialize_maps();
}
else
{
    directory_create("maps");
    add_default_maps();
    initialize_maps();
}

if(directory_exists(working_directory + "texts"))
{
    initialize_texts();
}
else
{
    directory_create("texts");
    initialize_texts();
}

randomize();
global.seed = random_get_seed();

global.mapsurf = 0;
global.bck_minimap = -1;


global.boxColor = 0;
global.GAMETYPE = 0;

global.CODENAME = "Basilisk";
ini_open("settings.ini");
global.TWITCHENABLED = ini_read_real("twitch","enable",0);
global.SELECTIONTIME = ini_read_real("twitch","time",60);
global.vsync = ini_read_real("settings","vsync",0);

var v = ini_read_real("settings","version",1);
var e = ini_read_real("settings","addcharacters",1);
if(v &lt; real(global.VERSION))
{
    if(e == 1)
    {
        ini_write_real("settings","version",real(global.VERSION));
        add_default_events();
        add_default_characters();
    }
}
ini_close();

ini_open("workshop.ini");
var co = ini_read_real("info","total",0);
for(var i = 0;i &lt; co;i++)
    workshop_add_created_item(ini_read_string("created","c"+string(i),-1));
ini_close();


room_goto_next();

application_surface_draw_enable(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.soundtrack[0] = 0;
directory = 0;
directory[0] = "";
totalMusic = initialize_files("soundtrack");

for(var i=0;i&lt;totalMusic;i++)
{
    global.soundtrack[i] = working_directory+"soundtrack\" + directory[i];
    global.soundtracknames[i] = directory[i];
}

totalMusic -= 1;
if(totalMusic &gt; 0)
{
    randomize();
    currentTrack = irandom(totalMusic);
    music = audio_create_stream(global.soundtrack[currentTrack]);
    audio_play_sound(music,0,0);
    
    yp = 0;
    ypG = true;
    ypWait = 60;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>initialize_characters();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check(vk_alt) &amp;&amp; keyboard_check(vk_f4))
    game_end();
    
if(keyboard_check(vk_tab))
{
    var mx = display_mouse_get_x() - 640;
    var my = display_mouse_get_y() - 360;
    window_set_position(mx,my);
}
if(keyboard_check_pressed(vk_numpad0) &amp;&amp; keyboard_check_pressed(vk_numpad1))
{
    if(global.uploadImage != -1)
        sprite_delete(global.uploadImage);
    global.uploadImage = sprite_add(get_open_filename("image file",".png"),0,0,0,0,0);
}

global.gs = max(1,display_get_height() div 1080);
 
/*if(keyboard_check_pressed(vk_space))
{
    show_debug_message(string(random_get_seed()));
}*/

if(mouse_wheel_down())
{
    if(global.eventRadius &gt; 10)
        global.eventRadius -= 5;
}
if(mouse_wheel_up())
{
    if(global.eventRadius &lt; 500)
        global.eventRadius += 5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Achievements

if(global.FIGHTER_COUNT &gt; 99)
    if(!steam_get_achievement("ACH_FIGHTER_100"))
        steam_set_achievement("ACH_FIGHTER_100");
        
if(global.FIGHTER_COUNT &gt; 199)
    if(!steam_get_achievement("ACH_FIGHTER_200"))
        steam_set_achievement("ACH_FIGHTER_200");
        
if(global.FIGHTER_COUNT &gt; 499)
    if(!steam_get_achievement("ACH_FIGHTER_500"))
        steam_set_achievement("ACH_FIGHTER_500");
        
if(global.FIGHTER_COUNT &gt; 999)
    if(!steam_get_achievement("ACH_FIGHTER_1000"))
        steam_set_achievement("ACH_FIGHTER_1000");
        
if(global.EVENT_COUNT &gt; 9)
    if(!steam_get_achievement("ACH_EVENT_10"))
        steam_set_achievement("ACH_EVENT_10");

if(global.EVENT_COUNT &gt; 29)
    if(!steam_get_achievement("ACH_EVENT_30"))
        steam_set_achievement("ACH_EVENT_30");
        
if(global.LANDMINE_KILLS &gt; 99)
    if(!steam_get_achievement("ACH_LAND_50"))
        steam_set_achievement("ACH_LAND_50");
        
if(global.LANDMINE_KILLS &gt; 199)
    if(!steam_get_achievement("ACH_LAND_90"))
        steam_set_achievement("ACH_LAND_90");
        
if(global.update_count &gt; 499)
    if(!steam_get_achievement("ACH_UPDATE_500"))
        steam_set_achievement("ACH_UPDATE_500");
        
if(global.update_count &gt; 999)
    if(!steam_get_achievement("ACH_UPDATE_1000"))
        steam_set_achievement("ACH_UPDATE_1000");
        
if(global.kill_count &gt; 199)
    if(!steam_get_achievement("ACH_KILL_60"))
        steam_set_achievement("ACH_KILL_60");
        
if(global.kill_count &gt; 229)
    if(!steam_get_achievement("ACH_KILL_80"))
        steam_set_achievement("ACH_KILL_80");
        
if(global.WILD_RIDE)
    if(!steam_get_achievement("ACH_WILD_RIDE"))
        steam_set_achievement("ACH_WILD_RIDE");
        
if(global.TIME_DAYS &gt; 6)
    if(!steam_get_achievement("ACH_DAYS_7"))
        steam_set_achievement("ACH_DAYS_7");
        
if(global.TIME_DAYS &gt; 9)
    if(!steam_get_achievement("ACH_DAYS_10"))
        steam_set_achievement("ACH_DAYS_10");
        
if(global.TWITTER)
    if(!steam_get_achievement("ACH_TWITTER"))
        steam_set_achievement("ACH_TWITTER");
        
if(global.FACEBOOK)
    if(!steam_get_achievement("ACH_FACEBOOK"))
        steam_set_achievement("ACH_FACEBOOK");
        
if(global.CREDITS)
    if(!steam_get_achievement("ACH_CREDITS"))
        steam_set_achievement("ACH_CREDITS");
        
if(global.GITHUB)
    if(!steam_get_achievement("ACH_GITHUB"))
        steam_set_achievement("ACH_GITHUB");
        
if(global.INSANE)
    if(!steam_get_achievement("ACH_SANITY"))
        steam_set_achievement("ACH_SANITY");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music

if(totalMusic &gt; 0)
{

    if(!audio_is_playing(music))
    {
        audio_destroy_stream(music);
        var rnd = irandom(totalMusic)
        while(totalMusic &gt; 1 &amp;&amp; rnd != currentTrack)
            rnd = irandom(totalMusic);
        currentTrack = rnd;
        music = audio_create_stream(global.soundtrack[totalMusic]);
        audio_play_sound(music,0,0);
        ypG = true;
    }
    
    if(ypG)
    {
        yp = smooth_approach(yp,60,.05);
        if(yp &gt; 59.5)
        {
            yp = 60;
            ypG = false;
            ypWait = 60;
        }
    }
    else
    {
        if(ypWait &gt; .5)
        {
            ypWait--;
        }
        else
        {
            yp = smooth_approach(yp,0,.1);
            if(yp &lt; .5)
            {
                yp = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var event_id = async_load[? "id"];

if(event_id == new_item)
{
    var type = async_load[? "event_type"];
    
    if(type == "ugc_create_item")
    {
        //I'm just going to pray that this continues working.
        if(room == rm_workshop)
        {
            global.workshopID = async_load[? "published_file_id"];
            
            var app_id = steam_get_app_id();
            updateHandle = steam_ugc_start_item_update(app_id, global.workshopID);
            
            steam_ugc_set_item_title(updateHandle, "Empty Workshop Fighter" );
            steam_ugc_set_item_description( updateHandle, "Use the Steam Workshop tool to upload a fighter");
            steam_ugc_set_item_visibility(updateHandle, ugc_visibility_private);
            
            var tagArray;
            tagArray[0] = "Character";
            
            steam_ugc_set_item_tags(updateHandle, tagArray);
            requestId = steam_ugc_submit_item_update(updateHandle, "Initial Character File");
            
            workshop_add_created_item(global.workshopID);
            ini_open("workshop.ini");
            var co = ini_read_real("info","total",0);
            ini_write_string("created","c"+string(co),string(global.workshopID));
            ini_write_real("info","total",co+1);
            ini_close();
            
            with (obj_uiMain) 
            {
                var _black = zui_create(0, 0, obj_uiBlack, -1000);
                with (zui_create(__width * 0.5, __height * 0.5, obj_uiWindow, -1001)) 
                {
                    zui_set_size(256, 112);   
                    black = _black;
                    with (zui_create(zui_get_width() * 0.5, zui_get_height() * 0.5 - 8, obj_uiLabel))
                        caption = "Recieving Info From Steam##This usually takes about 30 seconds...";
                }
            }
            
            alarm[0] = 1800;
        }
        else if(room == rm_eventedit)
        {
            global.workshopID = async_load[? "published_file_id"];
            workshopName = global.charname;
            ini_open(working_directory + "events\" + workshopName + "\" + workshopName + ".ini");
            ini_write_real("event","workshopID",global.workshopID);
            ini_close();
            
            var app_id = steam_get_app_id();
            updateHandle = steam_ugc_start_item_update(app_id, global.workshopID);
            
            steam_ugc_set_item_title(updateHandle, workshopName );
            steam_ugc_set_item_description( updateHandle, "Adds " + workshopName + " event to Ultimate Arena");
            steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);
            
            var tagArray;
            tagArray[0] = "Event";
            
            steam_ugc_set_item_tags(updateHandle, tagArray);
            steam_ugc_set_item_preview(updateHandle, working_directory + "events\" + workshopName + "\" + workshopName + ".png");
            steam_ugc_set_item_content(updateHandle, working_directory + "events\" + workshopName + "\");
            
            requestId = steam_ugc_submit_item_update(updateHandle, "Version " + string(global.charVersion));
        }
        else if(room == rm_mapedit)
        {
            global.workshopID = async_load[? "published_file_id"];
            workshopName = global.charname;
            ini_open(working_directory + "maps\" + workshopName + "\" + workshopName + ".ini");
            ini_write_real("map","workshopID",global.workshopID);
            ini_close();
            
            var app_id = steam_get_app_id();
            updateHandle = steam_ugc_start_item_update(app_id, global.workshopID);
            
            steam_ugc_set_item_title(updateHandle, workshopName );
            steam_ugc_set_item_description( updateHandle, "Adds " + workshopName + " map to Ultimate Arena");
            steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);
            
            var tagArray;
            tagArray[0] = "Map";
            
            steam_ugc_set_item_tags(updateHandle, tagArray);
            
            if(file_exists(working_directory+"maps\"+workshopName+'\'+workshopName+'overlay.png'))
                steam_ugc_set_item_preview(updateHandle, working_directory+"maps\"+workshopName+'\'+workshopName+'overlay.png');
            else
                steam_ugc_set_item_preview(updateHandle, working_directory + "maps\" + workshopName + "\" + workshopName + ".png");
                    
            steam_ugc_set_item_content(updateHandle, working_directory + "maps\" + workshopName + "\");
            requestId = steam_ugc_submit_item_update(updateHandle, "Version " + string(global.charVersion));
        }
        else if(room == rm_textedit)
        {
            global.workshopID = async_load[? "published_file_id"];
            workshopName = global.charname;
            
            ini_open(working_directory + "texts\" + workshopName + "\" + workshopName + ".ini");
            ini_write_real("text","workshopID",global.workshopID);
            ini_close();
            
            var ename = workshopName;
            
            if(global.uploadImage == -1)
            {
                var tempSprite = sprite_duplicate(spr_workshopUpdatesItem);
                sprite_save(tempSprite,0,working_directory + "texts\" + ename+ "\" + ename + ".png");
                sprite_delete(tempSprite);
            }
            else
            {
                sprite_save(global.uploadImage,0,working_directory + "texts\" + ename+ "\" + ename + ".png");
            }
            
            
            var app_id = steam_get_app_id();
            updateHandle = steam_ugc_start_item_update(app_id, global.workshopID);
            
            steam_ugc_set_item_title(updateHandle, workshopName );
            steam_ugc_set_item_description( updateHandle, "Adds " + workshopName + " update file to Ultimate Arena");
            steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);
            
            var tagArray;
            tagArray[0] = "Update";
            
            steam_ugc_set_item_tags(updateHandle, tagArray);
            steam_ugc_set_item_preview(updateHandle, working_directory + "texts\" + workshopName + "\" + workshopName + ".png");
            steam_ugc_set_item_content(updateHandle, working_directory + "texts\" + workshopName + "\");
                    
            requestId = steam_ugc_submit_item_update(updateHandle, "Version " + string(global.charVersion));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Character Upload

workshopName = global.charname;

vis = 2;
with(obj_uiCheckbox)
{
    if(bID == 1)
        if(value == 1)
        {
            vis = cID;
            show_debug_message("VIS: " + string(vis));   
        }
    
}


var app_id = steam_get_app_id();
updateHandle = steam_ugc_start_item_update(app_id, global.workshopID);

ini_open(working_directory + "characters\" + workshopName + "\" + workshopName + ".ini");
ini_write_string("debug","time",date_datetime_string(date_current_datetime()));
ini_close();

steam_ugc_set_item_title(updateHandle, workshopName );

if(workshopDesc == "Use the Steam Workshop tool to upload a fighter")
    steam_ugc_set_item_description(updateHandle,"Adds fighter " + workshopName + " to your Ultimate Arena collection");

//if(vis == 0)
    steam_ugc_set_item_visibility(updateHandle, ugc_visibility_public);
//if(vis == 1)
    //steam_ugc_set_item_visibility(updateHandle, ugc_visibility_friends_only);
//if(vis == 2)
    //steam_ugc_set_item_visibility(updateHandle, ugc_visibility_private);
    
steam_ugc_set_item_preview(updateHandle, working_directory + "characters\" + workshopName + "\" + workshopName + ".png");
steam_ugc_set_item_content(updateHandle, working_directory + "characters\" + workshopName + "\");

requestId = steam_ugc_submit_item_update(updateHandle, "Version " + date_datetime_string(date_current_datetime()));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(window_get_fullscreen())
{
    room_set_width(room,SW)
    room_set_height(room,SH) 
    global.WSCALE = SW;
    global.HSCALE = SH;
}
else
{
    room_set_width(room,1280)
    room_set_height(room,720)
    global.WSCALE = 1280;
    global.HSCALE = 720;
}


display_set_gui_size(global.WSCALE,global.HSCALE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(file_exists("text.ini"))
    file_delete("text.ini");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface_stretched(application_surface,0,0,SW,SH);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_game || room == rm_dya)
    ui_show_pause();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
