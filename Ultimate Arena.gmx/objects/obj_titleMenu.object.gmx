<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0);
draw_set_color(c_white);

hue = 0;

if(audio_is_playing(snd_outdoor_ambient))
{
    audio_stop_sound(snd_outdoor_ambient);
    audio_stop_sound(snd_outdoor_ambient2);
}

with (zui_main()) 
{
    //ui_show_popup("More features on the way,#thank you for playing!");
    with (zui_create(display_get_gui_width()/2, display_get_gui_height() / 2 + 226, obj_uiButton)) 
    {
        zui_set_size(260, 48);
        caption = "Quick Match";
        callback = title_buttons;
        tooltip = "Pick a map and fighters and watch them battle in the Ultimate Arena!"
        bID = 0;
    }
    
    with (zui_create(display_get_gui_width()/2 + 100, display_get_gui_height() / 2  + 270, obj_uiButton)) 
    {
         //zui_set_anchor(0, 0);
         zui_set_size(190, 24);
         caption = "Endless Arena";
         callback = title_buttons;
         tooltip = "Endlessly play matches back to back, great for casual viewing"
         bID = 12;
    }
    with (zui_create(display_get_gui_width()/2 + 100, display_get_gui_height() / 2  + 300, obj_uiButton)) 
    {
         //zui_set_anchor(0, 0);
         zui_set_size(190, 24);
         caption = "Settings";
         callback = title_buttons;
         tooltip = "Opens the settings menu"
         bID = 5;
    }    
    with (zui_create(display_get_gui_width()/2 + 100, display_get_gui_height() / 2  + 330, obj_uiButton)) 
    {
         //zui_set_anchor(0, 0);
         zui_set_size(190, 24);
         caption = "Exit Game";
         callback = title_buttons;
         tooltip = "Return to the desktop"
         bID = 3;
    }
    
    with (zui_create(display_get_gui_width()/2 - 100, display_get_gui_height() / 2  + 270, obj_uiButton)) 
    {
         zui_set_size(190, 24);
         caption = "Editors";
         callback = title_buttons;
         tooltip = "Add and edit Maps, Fighters, Events, and Text"
         bID = 4;
    }
    with (zui_create(display_get_gui_width()/2 - 100, display_get_gui_height() / 2  + 300, obj_uiButton)) 
    {
         zui_set_size(190, 24);
         caption = "Steam Workshop";
         tooltip = "Opens the Steam Workshop where you can browse people's creations to add to your game!"
         callback = title_buttons;
         bID = 23;
    }
    with (zui_create(display_get_gui_width()/2 - 100, display_get_gui_height() / 2  + 330, obj_uiButton)) 
    {
         zui_set_size(190, 24);
         caption = "Defend Your Arena";
         tooltip = "A spin-off game mode where you defend the Ultimate Arena from intruders!"
         callback = title_buttons;
         bID = 22;
    }
    
    with (zui_create(display_get_gui_width()/2 + 590, display_get_gui_height() / 2  + 300, obj_uiImageButton)) 
    {
         //github
         zui_set_size(80, 80);
         callback = title_buttons;
         image = spr_menuIcons;
         imgAnchor = 1;
         type = 0;
         bID = 11;
    }
    with (zui_create(display_get_gui_width()/2 + 590, display_get_gui_height() / 2  + 210, obj_uiImageButton)) 
    {
         zui_set_size(80, 80);
         caption = "Facebook";
         callback = title_buttons;
         image = spr_menuIcons;
         imgAnchor = 1;
         type = 1;
         bID = 13;
    }
    with (zui_create(display_get_gui_width()/2 + 590, display_get_gui_height() / 2  + 120, obj_uiImageButton)) 
    {
         zui_set_size(80, 80);
         caption = "Twitter";
         callback = title_buttons;
         image = spr_menuIcons;
         imgAnchor = 1;
         type = 2;
         bID = 14;
    }
    with (zui_create(display_get_gui_width()/2 + 590, display_get_gui_height() / 2  + 30, obj_uiImageButton)) 
    {
         zui_set_size(80, 80);
         caption = "Discord";
         callback = title_buttons;
         image = spr_menuIcons;
         imgAnchor = 1;
         type = 3;
         bID = 18;
    }
    with (zui_create(display_get_gui_width()/2 + 590, display_get_gui_height() / 2  - 60, obj_uiImageButton)) 
    {
         zui_set_size(80, 80);
         caption = "Twitch";
         callback = title_buttons;
         image = spr_menuIcons;
         imgAnchor = 1;
         type = 4;
         bID = 19;
    }
    
}

lmx = 0;
lmy = 0;
logo_timer = 0;
logo_x = irandom(SW-700);
logo_y = irandom(SH-352);
logo_xv = choose(true,false);
logo_yv = choose(true,false);
logo_col = make_color_hsv(random(255),255,255);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_control))
{
    if(!instance_exists(obj_uiWindow))
    {
        ini_open("settings.ini");
        var e = floor(ini_read_real("settings","addcharacters",1));
        e = !e;
        ini_write_real("settings","addcharacters",e);
        ini_close();
        
        if(e == 0)
            ui_show_popup("Additional Default Characters#have been disabled.");
        else
            ui_show_popup("Additional Default Characters#have been enabled.");
    }
}

if(mouse_x != lmx || mouse_y != lmy || keyboard_check_pressed(vk_anykey))
{
    logo_timer = 0;
    depth = 50;
}
    
lmx = mouse_x;
lmy = mouse_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_set_color(c_white);

with(obj_backgroundAnimation)
{
    other.hue = hue;
}

var c = make_color_hsv(hue,255,200);
var c2 = make_color_hsv(hue-30,255,200);
var c3 = make_color_hsv(hue,150,40);
var c4 = make_color_hsv(hue-30,150,40);


var sw = sprite_get_width(spr_ultimateArenaLogo);
var sh = sprite_get_height(spr_ultimateArenaLogo);

draw_sprite_general(spr_ultimateArenaLogo,0,0,0,sw,sh,display_get_gui_width()/2 - sw/2-10,(display_get_gui_height()/5)*2 - sh/2+10,1,1,0,c3,c3,c4,c4,1);
draw_sprite_general(spr_ultimateArenaLogo,0,0,0,sw,sh,display_get_gui_width()/2 - sw/2,(display_get_gui_height()/5)*2 - sh/2,1,1,0,c,c,c2,c2,1);

var gw = display_get_gui_width();
var gh = display_get_gui_height();

if(logo_xv)
{
    logo_x++;
    if(logo_x &gt; gw-350)
    {
        logo_xv = false;
        logo_col = make_color_hsv(random(255),255,255);
    }
}
else
{
    logo_x--;
    if(logo_x &lt; 0)
    {
        logo_xv = true;
        logo_col = make_color_hsv(random(255),255,255);
    }
}

if(logo_yv)
{
    logo_y++;
    if(logo_y &gt; gh-176)
    {
        logo_yv = false;
        logo_col = make_color_hsv(random(255),255,255);
    }
}
else
{
    logo_y--;
    if(logo_y &lt; 0)
    {
        logo_yv = true;
        logo_col = make_color_hsv(random(255),255,255);
    }
}
logo_timer++;
if(logo_timer &gt; 1800)
{
    depth = -50;
    draw_rectangle_color(0,0,gw,gh,c_black,c_black,c_black,c_black,0);
    draw_sprite_ext(spr_ultimateArenaLogo,0,logo_x+350/2,logo_y+176/2,.5,.5,0,logo_col,1);
}


with(obj_setup)
{
    if(totalMusic &gt; 0)
    {
        draw_set_font(font3);
        draw_set_valign(fa_top);
        draw_set_halign(fa_right);
        draw_text_colour(1270,-50 + yp,"Now Playing: " + global.soundtracknames[currentTrack],c_white,c_white,c_gray,c_gray,.8);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
