<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.TIME_SECONDS = 0;
global.TIME_MINUTES = 0;
global.TIME_HOURS = 12;
global.TIME_DAYS = 1;
global.TIME_STRING = "00:12:00";
global.NAMES[0] = " ";
global.KILL_STRING = "KILLS:  ";
global.DEATH_STRING = "DEATHS:  ";
killleader = 0;
killleaderprev = 0;
killleaderkills = 0;
xpleader = 0;
xpleaderprev = 0;
xpleaderxp = 0;
sanityleader = 0;
sanityleaderprev = 0;
sanityleaders = 0;
ind1 = 0;
ind2 = 0;
ind3 = 0;

update[3] = 0;

alarm[0] = global.GAME_SPEED;
sidemenu = surface_create(100,500);
for(i = 0;i &lt; global.fighters+1;i++)
{
    global.killArray[i] = 0;
    global.DEATH_ARRAY[i] = 0;
    xpArray[i] = 0;
    sanityArray[i] = 0;
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.TIME_SECONDS+=30;
alarm[0] = global.GAME_SPEED;
global.KILL_STRING = "KILLS:  ";
global.DEATH_STRING = "DEATHS:  ";
killleader = 0;
killleaderkills = 0;
xpleader = 0;
xpleaderxp = 0;
sanityleader = 0;
sanityleaders = 101;
with(obj_fighter)
{
    global.killArray[fighterID] = kills;
    other.xpArray[fighterID] = XP;
    other.sanityArray[fighterID] = SANITY;
}

for(i = 1;i &lt; global.fighters+1;i++)
{
    if (global.killArray[i] &gt; 0)
    {
        //global.KILL_STRING = global.KILL_STRING + string_upper(global.NAMES[i]) + ": "+ string(global.killArray[i]) + "  ";
        global.KILL_STRING = global.KILL_STRING + global.NAMES[i] + ": "+ string(global.killArray[i]) + "  ";
        
        if (killleaderkills &lt; global.killArray[i])
        {
            killleader = i;
            killleaderkills = global.killArray[i]
        }
    }
    
    if (xpleaderxp &lt; xpArray[i])
    {
        xpleader = i;
        xpleaderxp = xpArray[i]
    }
    
    if (sanityleaders &gt; sanityArray[i])
    {
        sanityleader = i;
        sanityleaders = sanityArray[i]
    }
}
global.KILL_STRING = string_upper(global.KILL_STRING);

for(i = 1;i &lt; global.fighters;i++)
{
    if (global.DEATH_ARRAY[i] &gt; 0)
    {
        //global.DEATH_STRING = global.DEATH_STRING + string_upper(global.NAMES[i])+"  ";
        global.DEATH_STRING = global.DEATH_STRING + string(global.NAMES[i])+"  ";
    }
}
global.DEATH_STRING = string_upper(global.DEATH_STRING);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_valign(fa_top);
draw_set_halign(fa_left);

if (global.TIME_SECONDS == 60)
{
    global.TIME_SECONDS = 0;
    global.TIME_MINUTES += 1;
    if (global.TIME_MINUTES == 60)
    {
        global.TIME_MINUTES = 0;
        global.TIME_HOURS += 1;
        if (global.TIME_HOURS == 24)
        {
            global.TIME_HOURS = 0;
            global.TIME_DAYS += 1;
        }
    }
}

if(killleaderprev != killleader)
    update[0] = 120;

if(xpleaderprev != xpleader)
    update[1] = 120;
    
if(sanityleaderprev != sanityleader)
    update[2] = 120;
    
with(obj_arenaController)
{
    sanityleader = other.sanityleader;
    xpleader = other.xpleader;
    killleader = other.killleader;
}
    
if(!surface_exists(sidemenu))
{
    sidemenu = surface_create(100,500);
}
surface_set_target(sidemenu);
draw_rectangle_colour(0,0,100,500,c_1,c_1,c_1,c_1,0);

var timeh = "";
var timem = "";
var times = "";

if (global.TIME_SECONDS &lt; 10)
    times = "0"+string(global.TIME_SECONDS);
else
    times = string(global.TIME_SECONDS);
    
if (global.TIME_MINUTES &lt; 10)
    timem = "0"+string(global.TIME_MINUTES);
else
    timem = string(global.TIME_MINUTES);

if (global.TIME_HOURS &lt; 10)
    timeh = "0"+string(global.TIME_HOURS);
else
    timeh = string(global.TIME_HOURS);

global.TIME_STRING = timeh + ":" + timem + ":" + times
draw_set_halign(fa_center);
draw_set_font(font0);
draw_set_color(c_white);


draw_text(50,5,"FIGHTERS LEFT");
draw_text(50,20,string(global.fighters_remaining) + " / " + string(global.fighters));

draw_text(50,40,"EVENT TOTAL");
draw_text(50,55,string(global.event_count));

draw_text(50,75,"UPDATE TOTAL");
draw_text(50,90,string(global.update_count));

draw_text(50,110,"HOMICIDES");
draw_text(50,125,string(global.kill_count));

draw_text(50,145,"EVENT KILLS");
draw_text(50,160,string(global.event_kills));

draw_text(50,196,"KILL LEADER");

texture_set_interpolation(1);
draw_sprite_stretched(global.IMAGES[killleader],ind1,26,212,48,48);
texture_set_interpolation(0);

if(update[0] &gt; 0)
{
    draw_sprite_stretched(spr_breakingUpdate,update[0],26,212,48,48);
    update[0]--;
}
draw_text(50,260,global.NAMES[killleader]);
draw_text(50,274,"KILLS: " + string(killleaderkills));

draw_text(50,300,"CPU'S CHOICE");

texture_set_interpolation(1);
draw_sprite_stretched(global.IMAGES[xpleader],ind2,26,316,48,48);
texture_set_interpolation(0);

if(update[1] &gt; 0)
{
    draw_sprite_stretched(spr_breakingUpdate,update[1],26,316,48,48);
    update[1]--;
}
draw_text(50,364,global.NAMES[xpleader]);
draw_text(50,378,"KILLS: " + string(global.killArray[xpleader]));

draw_text(50,404,"LEAST SANE");

texture_set_interpolation(1);
draw_sprite_stretched(global.IMAGES[sanityleader],ind3,26,420,48,48);
texture_set_interpolation(0);

if(update[2] &gt; 0)
{
    draw_sprite_stretched(spr_breakingUpdate,update[2],26,420,48,48);
    update[2]--;
}
draw_text(50,468,global.NAMES[sanityleader]);
draw_text(50,482,"SANITY: " + string(sanityleaders) + "%");

draw_set_halign(fa_left);
surface_reset_target();
    
if (alarm[0] == -1 &amp;&amp; global.GAME_SPEED &gt; 0)
{

    alarm[0] = global.GAME_SPEED;

}

ind1 += global.IMAGESP[killleader];
ind2 += global.IMAGESP[xpleader];
ind3 += global.IMAGESP[sanityleader];
sanityleaderprev = sanityleader;
xpleaderprev = xpleader;
killleaderprev = killleader;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
