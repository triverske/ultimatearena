<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-101</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Map
global.event_count = 0;
global.fighter_place[global.fighters] = 0;
global.deadUpdates = 1;
global.otherUpdates = 1;
global.update_count = 0;
global.kill_count = 0;
global.event_kills = 0;
global.LANDMINE_KILLS = 0;
global.DEADLOC[global.fighters,0] = 0;
global.DEADLOC[global.fighters,1] = 0;

sanityleader = -1;
xpleader = -1;
killleader = -1;
updateScroll = 0;

news = -1;
newsHeadline = string(global.fighters) + " FIGHTERS ENTER THE ULTIMATE ARENA!";
newsIssue = 0;
newsFightersDead = ds_list_create();
newsPrev = 12;

global.log[0] = "";
global.logi = 0;

skullx = 0;
skully = 0;

instance_create(0,0,obj_hoverStats);
instance_create(256,256,obj_arenaShrink);
draw_set_valign(fa_top);

//show_debug_overlay(true);
global.GAME_SPEED = global.SAVE_SPEED;
global.extraFrames = 0;
global.fighters_remaining = global.fighters;
tile_size = 32;
instance_create(0,0,obj_deathSign);
instance_create(0,0,obj_sideMenu);
map = surface_create(512,512);
realmap = surface_create(662,662);
updates = surface_create(390,74*50);
global.boxColor = 0;
audio_play_sound(snd_outdoor_ambient,0,1);
audio_play_sound(snd_outdoor_ambient2,0,1);
mapSize = 512;
global.mapSize = mapSize;

//check if loading or new
if(global.loadingGame == 1)
{
    global.loadingGame = 0;
    load_game_finish();
}
else
{
    if(global.arena_events)
        event_timer = irandom(20000);
    else
        event_timer = 0;
        
    for(var i = 0;i&lt;global.fighters+2;i++)
        global.deadday[i] = "";
    
    for(var i = 0;i &lt; global.trees; i++)
    {
        var c = instance_create(global.treeloc[i,0],global.treeloc[i,1],obj_tree);
        c.foodcount = ceil(random(3));
    }
    
    for(var i = 0;i &lt; global.wood; i++)
        instance_create(global.woodloc[i,0],global.woodloc[i,1],obj_wood);
        
    for(var i = 0;i &lt; global.rope; i++)
        instance_create(global.ropeloc[i,0],global.ropeloc[i,1],obj_rope);
        
    for(var i = 0;i &lt; global.stone; i++)
        instance_create(global.stoneloc[i,0],global.stoneloc[i,1],obj_stone);
        
    for(var i = 0;i &lt; 6;i++)
        regGroup[i] = -1;
    for(var i = 1;i &lt; global.fighters+1; i++)
    { 
        global.deathCause[i] = "Death by ???";
        var c = instance_create(0,0,obj_fighter);
        c.fighterID = i;
        global.IDLIST[i] = c;
        c.color = global.COLORS[i];
        c.NAME = global.NAMES[i];
        c.STRENGTH = global.STATS[i,0];
        c.AGILITY = global.STATS[i,1];
        c.ENDURANCE = global.STATS[i,2];
        c.SKILL = global.STATS[i,3];
        c.LUCK = global.STATS[i,4];
        team_set(i,c);
    }    
    global.NAMES[global.fighters+1] = "";
    groups[0,0] = -1;
    groups[0,1] = c_white;
    totalGroups = 0;
    showGroups = 0;
    if(global.landmines)
    {
        for(var i = 0;i &lt; 12; i++) 
            instance_create(floor(random(472))+20,floor(random(472))+20,obj_landmine);
    }
}
with(zui_main())
{
    create_window_map();
    create_window_updates();
    
    with(zui_create(75,global.HSCALE/2,obj_uiWindow,-1))
    {
        wID = "Stats";
        callback = arena_ui;
        zui_set_size(140,524);
        with(zui_create(0,0,obj_uiWindowCaption))
        {
            caption = "Stats";
            draggable = 1;
        }
        zui_create(0,0,obj_uiExitButton,-1);
    }
    
    with(zui_create(0,0,obj_uiWindow,-100))
    {
        wID = "Test";
        callback = arena_ui;
        zui_set_size(global.WSCALE,55);
        zui_set_anchor(0,0);
        for(var i=0;i&lt;4;i++)
        {
            with (zui_create(120+20*i,35,obj_uiImageButton))
            {
                type = i;
                bID = i;
                callback = arena_ui;
                image = spr_gameSpeedButtons;
                zui_set_size(18,18);
            }
        } 
        for(var i=0;i&lt;8;i++)
        {
            with (zui_create(240+44*i,28,obj_uiImageButton))
            {
                type = i;
                bID = i + 4;
                callback = arena_ui;
                image = spr_gameButtons;
                zui_set_size(42,42);
            }
        } 
    }
}
alarm[0] = global.GAME_SPEED;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_timer--;

if(event_timer == 0 &amp;&amp; !instance_exists(obj_arenaEvent))
{
    var event = floor(random(global.EVENT_COUNT));
    s = instance_create(0,0,obj_arenaEvent);
    s.event = event;
    s.alarm[0] = global.GAME_SPEED;
    global.event_count++;
    
    ini_open(global.EVENT[event]);
    s.description = ini_read_string("event","description","ERROR");
    s.name = ini_read_string("event","name","ERROR");
    
    var d1 = ini_read_real("event","death_percentage",0);
    var d2 = max(d1,ini_read_real("event","death_percentage_u",0));
    s.death_percentage = round(random_range(d1,d2));
    
    ini_close();
}

alarm[0] = global.GAME_SPEED;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_map();



var scr = false;
with(obj_uiWindow)
    if(wID == "Updates")
        if(__hover)
            scr = true;
            
if(scr)
{
    if(mouse_wheel_up())
        updateScroll -= 34;
    else if(mouse_wheel_down())
        updateScroll += 34;
}

updateScroll = clamp(updateScroll,0,7400);

draw_updates();

if (alarm[0] == -1 &amp;&amp; global.GAME_SPEED &gt; 0)
    alarm[0] = global.GAME_SPEED;

//Pause on Space 
if(keyboard_check_pressed(vk_space))
{
    if (global.GAME_SPEED == 0)
    {
        global.GAME_SPEED = global.SAVE_SPEED;
    }
    else if (global.GAME_SPEED != 0)
    {
        global.SAVE_SPEED = global.GAME_SPEED;
        global.GAME_SPEED = 0;
    }
    surface_free(news);
}

if(!surface_exists(news))
{
    generate_news();
    
}


if(global.TIME_HOURS mod 6 == 0 &amp;&amp; global.TIME_MINUTES == 0 &amp;&amp; newsPrev != global.TIME_HOURS)
{
    generate_news();
    newsPrev = global.TIME_HOURS;
}


if (keyboard_check_pressed(vk_subtract))
{
    if(global.extraFrames &gt; 0)
        global.extraFrames--;
    else if(global.GAME_SPEED != 0 &amp;&amp; global.GAME_SPEED &lt; 40)
        global.GAME_SPEED++;
    audio_play_sound(snd_blip,0,0);
}
if (keyboard_check_pressed(vk_add))
{
    if (global.GAME_SPEED != 0 &amp;&amp; global.GAME_SPEED &gt; 1)
        global.GAME_SPEED--;
    else if(global.GAME_SPEED == 1)
    {
        if(global.extraFrames &lt; 3)
            global.extraFrames++;
    }
    audio_play_sound(snd_blip,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_color(c_white);
draw_set_font(font0);

if(global.GAMETYPE == 1)
    draw_text(50,5,"GAME \#" + string(global.currentgame));
else
    draw_text(50,5,"ARENA MODE");
draw_text(50,20,"DAY " + string(global.TIME_DAYS));
draw_text(50,35,global.TIME_STRING);


if (global.GAME_SPEED == 0)
    draw_text(150,10,"PAUSED");
else
    draw_text(150,10,string(floor(60/global.GAME_SPEED*10*(global.extraFrames+1))) + "X SPEED");

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
