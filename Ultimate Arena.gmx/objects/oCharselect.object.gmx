<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.IDselected = -1;
global.GAME_SPEED = 12;
global.SAVE_SPEED = 12;

regen = 1;
startgame = 0;

var WS = global.WSCALE;
var HS = global.HSCALE;

global.custom_sounds = 0;
with (zui_main()) 
{
    with (zui_create(0, 0, objUIWindow, -1))
    {
        zui_set_anchor(0,0);
        zui_set_size(260,display_get_gui_height());
        zui_set_position(0,0);
        wID = "Select Characters";
        with(zui_create(0,0,objUIWindowCaption))
        {
            caption = "Select Characters";
        }

        with(zui_create(0,24,objUIListBox))
        {
            zui_set_anchor(0,0);
            zui_set_size(260,display_get_gui_height()-64);
            callback = fighter_select_buttons;
            initialize_listbox(global.cNAME);
            global.select_list = id;
            draw_callback = fighter_select_draw_ui;
            type = 1;
            for(i=length-1;i&gt;=0; i--)
            {
                selected[i] = 1;
            }
            
            other.listID = id;
            with(zui_create(0,0,objUIListBoxScroll)){}
        }
        
        with (zui_create(5, __height - 35, objUIButton)) 
        {
            zui_set_anchor(0,0);
            zui_set_size(150, 30);
            caption = "Toggle Selection";
            callback = selection_ui;
            bID = 0;
            listID = other.listID;
        }
        
        with (zui_create(159, __height - 35, objUIButton)) 
        {
            zui_set_anchor(0,0);
            zui_set_size(96, 30);
            caption = "Clear";
            callback = selection_ui;
            bID = 1;
            listID = other.listID;
        }
    }
    
    create_window_mapeditor();
    
    with (zui_create(540, 10, objUIWindow, -1))
    {
        wID = "Selected Character";
        callback  = fighter_select_buttons;
        zui_set_size(250,168);
        zui_set_position(WS * .4,HS * .5 - 208);
        //zui_set_position(WS * .4,floor(HS * .2));
        
        with (zui_create(5, __height - 70, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Select By Tag";
            callback = fighter_select_buttons;
            bID = 2;
        }
        
        with (zui_create(5, __height - 35, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(150, 30);
            caption = "Select Random 50";
            callback = fighter_select_buttons;
            bID = 14;
        }
        with (zui_create(160, __height - 35, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(40, 30);
            caption = "100";
            callback = fighter_select_buttons;
            bID = 15;
        }
        with (zui_create(205, __height - 35, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(40, 30);
            caption = "250";
            callback = fighter_select_buttons;
            bID = 16;
        }
        with (zui_create(0, 0, objUIWindowCaption)) 
        {
            caption = "Character Selection";
            draggable = 0;

        }
    }
    
    with (zui_create(540, 10, objUIWindow, -1))
    {
        wID = "Arena Settings";
        callback  = fighter_select_buttons;
        zui_set_size(250,226);
        zui_set_position(WS * .4,HS * .5 + 237);
        with (zui_create(0, 0, objUIWindowCaption)) 
        {
            caption = "Map Settings";
            draggable = 0;
            type = 1;
        }
        with (zui_create(125, 37, objUILabel)) 
        {
            caption = "Seed: " +  string(random_get_seed());
            callback = fighter_select_buttons;
            lID = "seed";
        }
        
        with (zui_create(5, __height - 35, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Return To Title";
            callback = fighter_select_buttons;
            bID = 0;
        }
        
        with (zui_create(5, __height - 70, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Select Saved Map";
            callback = fighter_select_buttons;
            bID = 13;
        }
        with (zui_create(5, __height - 105, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Regenerate Map";
            callback = fighter_select_buttons;
            bID = 1;
        }
        with (zui_create(5, __height - 140, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Create From Seed";
            callback = fighter_select_buttons;
            bID = 8;
        }
        with (zui_create(5, __height - 175, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Begin Game";
            callback = fighter_select_buttons;
            bID = 3;
        }
    }
    
    with (zui_create(540, 10, objUIWindow, -1))
    {
        wID = "Arena Settings";
        callback  = fighter_select_buttons;
        zui_set_size(250,230);
        zui_set_position(WS * .4,HS * .5 );
        with (zui_create(0, 0, objUIWindowCaption)) 
        {
            caption = "Match Settings";
            draggable = 0;
            type = 1;

        }
                        
        with (zui_create(__width/2, 40, objUILabel)) 
        {
            fcount = global.fighters;
            callback = fighter_select_buttons;
            lID = "fightercount";
        }
        with (zui_create(__width/2, 70, objUILabel)) 
        {
            callback = fighter_select_buttons;
            lID = "gamespeed";
        }
        with (zui_create(__width/2 + 70, 70, objUIButton)) 
        {
            zui_set_anchor(.5,.5);
            zui_set_size(20, 20);
            caption = "&gt;";
            callback = fighter_select_buttons;
            bID = 10;
        }
        with (zui_create(__width/2 - 70, 70, objUIButton)) 
        {
            zui_set_anchor(.5,.5);
            zui_set_size(20, 20);
            caption = "&lt;";
            callback = fighter_select_buttons;
            bID = 9;
        }
        
        with (zui_create(5, __height - 35, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Arena Events On";
            global.arena_events = 1;
            type = 3;
            callback = fighter_select_buttons;
            bID = 4;
        }
        
        with (zui_create(5, __height - 70, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            global.landmines = 1;
            caption = "Inital Landmines On";
            type = 3;
            callback = fighter_select_buttons;
            bID = 5;
        }
        
        /*with (zui_create(5, __height - 105, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Custom Sounds On";
            global.custom_sounds = 1;
            type = 3;
            callback = fighter_select_buttons;
            bID = 6;
        }*/
        with (zui_create(5, __height - 105, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Groups On";
            global.fighterGroups = 1;
            type = 3;
            callback = fighter_select_buttons;
            bID = 12;
        }
        
        with (zui_create(5, __height - 140, objUIButton)) 
        {
            zui_set_anchor(0, 0);
            zui_set_size(240, 30);
            caption = "Custom Updates On";
            global.custom_updates = 1;
            type = 3;
            callback = fighter_select_buttons;
            bID = 7;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var fcount = 0;
for(var i = 0; i &lt; global.select_list.length; i++)
{
    if (global.select_list.selected[i] == 0)
        fcount++;
}

global.fighters = fcount;


if (regen == 1)
{
    randomize();
    global.seed = random_get_seed();
    tile_size = 32;  // the size of your tiles
    show_minimap = true;
    
    var WS = global.WSCALE;
    var HS = global.HSCALE;
    
    scr_generate_map(256, 64, -.65, 0.3, 0.15, false);
    regen = 0;
    with(objUIWindow)
    {
        if (wID == "Map Window")
        {
            zui_destroy();
        }
    }
    with (zui_main()) 
    {
        create_window_mapeditor();
    }
}
if (regen == 2)
{
    random_set_seed(global.seed);
    tile_size = 32;  // the size of your tiles
    show_minimap = true;
    
    var WS = global.WSCALE;
    var HS = global.HSCALE;
    
    //scr_load_map("MapTest2.png");
    scr_generate_map(256, 64, -.65, 0.3, 0.15, false);
    regen = 0;
    with(objUIWindow)
    {
        if (wID == "Map Window")
        {
            zui_destroy();
        }
    }
    with (zui_main()) 
    {
        create_window_mapeditor();
    }
}

var charcount = 0;
if (startgame == 1)
{
    with (global.select_list)
    {
        for(i =0;i &lt; length;i++)
        {
        if(selected[i] == 0)
        {   
            charcount++;
            file = global.fNAME[i]
            ini_open(working_directory + "characters\" + file);
            global.NAMES[charcount] = ini_read_string("character","name","NAMING ERROR");
            global.GENDER[charcount] = ini_read_real("character","gender",0);
            global.SOUNDS[charcount] = ini_read_string("character","deathsound","");
            global.FILES[charcount] = file;
            
            var r = ini_read_real("character","colorr",255);
            var g = ini_read_real("character","colorg",255);
            var b = ini_read_real("character","colorb",255);
            global.COLORS[charcount] = make_color_rgb(r,g,b);
            
            global.STATS[charcount,0] = max(min(10,ini_read_real("character","strength",5)),1);
            global.STATS[charcount,1] = max(min(10,ini_read_real("character","agility",5)),1);
            global.STATS[charcount,2] = max(min(10,ini_read_real("character","endurance",5)),1);
            global.STATS[charcount,3] = max(min(10,ini_read_real("character","skill",5)),1);
            global.STATS[charcount,4] = max(min(10,ini_read_real("character","luck",5)),1);
            
            global.IMAGES[charcount] = global.cIMAGES[i];
            /*cImage = ini_read_string("character","image","sFighterImage");
            if (cImage != "sFighterImage")
                global.IMAGES[charcount] = sprite_add(working_directory + "characters\" + cImage,1,0,0,0,0);
            else
                global.IMAGES[charcount] = sFighterImage;*/
            ini_close();
        }
        }
    }
    global.IMAGES[0] = sFighterImage;
    global.fighters = charcount;
    if (charcount &lt; 4)
        ui_show_popup("You need at least 4 characters#to begin the match.");
    else if (charcount &gt; 250)
        ui_show_popup("Only 250 can participate in a match.");
    else
    {
        combine_texts();
        var c = instance_create(0,0,oRoomTransition);
        c.gotoroom = rm_game;
    }
    
    startgame = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i_d = ds_map_find_value(async_load, "id");

if ds_map_find_value(async_load, "status")
{
    global.seed = ds_map_find_value(async_load, "value");
    regen = 2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font0);
draw_set_color(c_white);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
