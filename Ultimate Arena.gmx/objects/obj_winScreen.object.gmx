<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-40</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
place[global.fighters+1] = 0;
place[10] = 0;

for(var i = 1;i &lt; global.fighters+1;i++)
{
    if(global.DEATH_ARRAY[i] == 0)
    {
        winner = global.NAMES[i];
        global.fighter_place[1] = i;
    }
}

global.SAVE_SPEED = global.GAME_SPEED;
global.GAME_SPEED = 0;
global.scrollspeed1 = 0;
global.scrollspeed2 = 0;

Sname = part_system_create()

particle1 = part_type_create();
part_type_shape(particle1,pt_shape_square);
part_type_size(particle1,0.01,0.10,0,0.05);
part_type_scale(particle1,1,1);
part_type_color1(particle1,16711680);
part_type_alpha3(particle1,1,1,0);
part_type_speed(particle1,1.2,5.2,0,0);
part_type_direction(particle1,250,290,0,20);
part_type_orientation(particle1,0,359,4,10,1);
part_type_blend(particle1,0);
part_type_life(particle1,60,400);

particle2 = part_type_create();
part_type_shape(particle2,pt_shape_square);
part_type_size(particle2,0.01,0.10,0,0.05);
part_type_scale(particle2,1,1);
part_type_color1(particle2,make_color_rgb(255,0,0));
part_type_alpha3(particle2,1,1,0);
part_type_speed(particle2,1.2,5.2,0,0);
part_type_direction(particle2,250,290,0,20);
part_type_orientation(particle2,0,359,4,10,1);
part_type_blend(particle2,0);
part_type_life(particle2,60,400);

particle3 = part_type_create();
part_type_shape(particle3,pt_shape_square);
part_type_size(particle3,0.01,0.10,0,0.05);
part_type_scale(particle3,1,1);
part_type_color1(particle3,make_color_rgb(255,255,255));
part_type_alpha3(particle3,1,1,0);
part_type_speed(particle3,1.2,5.2,0,0);
part_type_direction(particle3,250,290,0,20);
part_type_orientation(particle3,0,359,4,10,1);
part_type_blend(particle3,0);
part_type_life(particle3,60,400);

emitter1 = part_emitter_create(Sname);
part_emitter_region(Sname,emitter1,0,GUIW,0,0,1,0);
part_emitter_stream(Sname,emitter1,particle1,2);

emitter2 = part_emitter_create(Sname);
part_emitter_region(Sname,emitter2,0,GUIW,0,0,1,0);
part_emitter_stream(Sname,emitter2,particle2,2);

part_system_automatic_draw(Sname,0);

for(var i = 0;i &lt; 400;i++)
    part_system_update(Sname);
    
winSurf = surface_create(1280,720);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.ENDLESS == 0)
{

    if (keyboard_check_pressed(ord('R')))
    {
        room_restart();
    }
    else if (keyboard_check_pressed(vk_enter))
    {
        file_delete("text.ini");
        room_goto(rm_title);
    }
    if(keyboard_check_pressed(vk_control))
    {
        var file;
        file = get_save_filename("Ultimate Arena Log|*.txt", "log.txt");
        if(file != "")
        {
            var nf = file_text_open_write(file);
            for(var i = 0;i &lt; global.logi;i++)
            {
                file_text_write_string(nf, global.log[i]);
                file_text_writeln(nf);
            }
            file_text_close(nf);
        }
    }
    
}
else if(global.ENDLESS == 1)
{
    room_restart();
}

if(!surface_exists(winSurf))
    winSurf = surface_create(1280,720);

surface_set_target(winSurf)
draw_clear_alpha(c_black,.7);
draw_set_alpha(.95);
draw_set_color(c_black);
draw_set_font(font3);

draw_rectangle(100,100,1180,620,false);
draw_set_color(c_white);
draw_set_alpha(1);
draw_set_valign(fa_top);

var txt = "";
txt+= "2st PLACE: " + global.NAMES[global.fighter_place[2]] + "#";
txt+= "3rd PLACE: " + global.NAMES[global.fighter_place[3]] + "#";
txt+= "4th PLACE: " + global.NAMES[global.fighter_place[4]] + "#";

draw_set_halign(fa_center); 
draw_text(room_width/2,140,"THE WINNER OF THE ULTIMATE ARENA IS####" + global.NAMES[global.fighter_place[1]]);
draw_text(260,460,"RUNNER UPS");
draw_set_font(font0);
draw_text(160,500,"2nd Place####" + global.NAMES[global.fighter_place[2]]);
draw_text(260,500,"3rd Place####" + global.NAMES[global.fighter_place[3]]);
draw_text(360,500,"4th Place####" + global.NAMES[global.fighter_place[4]]);
draw_text(500,500,"Last Place####" + global.NAMES[global.fighter_place[global.fighters]]);

draw_text(256,380,"Participants#" + string(global.fighters));
draw_text(448,380,"Update Count#" + string(global.update_count));
draw_text(640,380,"Homicides#" + string(global.kill_count));
draw_text(832,380,"Event Count#" + string(global.event_count));
draw_text(1024,380,"Killed By Events#" + string(global.event_kills));

draw_set_halign(fa_right);
draw_text(1120,500,"Press CTRL to save a log of the match#Press R to restart the match under the same conditions#Press ENTER to return to the Main Menu");

texture_set_interpolation(1);
draw_sprite_stretched(global.IMAGES[global.fighter_place[1]],0,room_width/2 - 50,182,100,100);

draw_sprite_stretched(global.IMAGES[global.fighter_place[2]],0,140,519,40,40);
draw_sprite_stretched(global.IMAGES[global.fighter_place[3]],0,240,519,40,40);
draw_sprite_stretched(global.IMAGES[global.fighter_place[4]],0,340,519,40,40);
draw_sprite_stretched(global.IMAGES[global.fighter_place[global.fighters]],0,480,519,40,40);

texture_set_interpolation(0);

draw_set_halign(fa_left); 


part_system_drawit(Sname);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(window_get_fullscreen())
{
    texture_set_interpolation(1);
    draw_surface_stretched(winSurf,0,0,GUIW,GUIH);
    texture_set_interpolation(0);
}
else
{
    draw_surface(winSurf,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
