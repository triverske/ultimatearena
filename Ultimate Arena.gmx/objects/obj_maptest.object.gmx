<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mapSurf = -1;
mapWidth = 500;
mapHeight = 500;

colSurf = surface_create(384,384);
heightSurf = surface_create(384,384);

phi = 0;

surface_set_target(colSurf);
draw_sprite(spr_map,0,0,0);
surface_reset_target();

surface_set_target(heightSurf);
draw_sprite(spr_map,1,0,0);
surface_reset_target();

colMap[384,384] = 0;
heightMap[384,384] = 0;
for(var i = 0;i &lt; 384;i++)
{
    for(var c = 0;c &lt; 384;c++)
    {
        heightMap[i,c] = color_get_red(surface_getpixel(heightSurf,i,c));
        colMap[i,c] = surface_getpixel(colSurf,i,c);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(mapSurf))
    mapSurf = surface_create(mapWidth,mapHeight);

var px = 200;
var py = 200;
var height = 50;
var horizon = 120;
var scale_height = 120;
var distance = 120;

var plx = 0;
var prx = 0;
var ply = 0;
var pry = 0;

if(keyboard_check_pressed(ord("E")))
    phi++;
if(keyboard_check_pressed(ord("Q")))
    phi--;

/*
def Render(p, height, horizon, scale_height, distance, screen_width, screen_height):
    # Draw from back to the front (high z coordinate to low z coordinate)
    for z in range(distance, 1, -1):
        # Find line on map. This calculation corresponds to a field of view of 90Â°
        pleft  = Point(-z + p.x, -z + p.y)
        pright = Point( z + p.x, -z + p.y)
        # segment the line
        dx = (pright.x - pleft.x) / screen_width
        # Raster line and draw a vertical line for each segment
        for i in range(0, screen_width):
            height_on_screen = (height - heightmap[pleft.x, pleft.y]) / z * scale_height. + horizon
            DrawVerticalLine(i, height_on_screen, screen_height, colormap[pleft.x, pleft.y])
            pleft.x += dx
Render( Point(0, 0), 50, 120, 120, 300, 800, 600 )
*/

surface_set_target(mapSurf);
var sinphi = sin(phi);
var cosphi = cos(phi);
var m = 10;
for(var z = distance;z &gt; 1;z-=m)
{
    m = floor(m * .9);

    plx = (-cosphi*z - sinphi*z) + px;
    ply = ( sinphi*z - cosphi*z) + py;
    prx = ( cosphi*z - sinphi*z) + px;
    pry = (-sinphi*z - cosphi*z) + py;
    
    var dx = (prx - plx) / mapWidth;
    var dy = (pry - ply) / mapWidth;
    //Render time
    for(var i = 0;i &lt; mapWidth;i++)
    {
        var hm = heightMap[plx,ply];
        var cm = colMap[plx,ply];
        height_on_screen = (height - hm) / z * scale_height + horizon;
        draw_set_color(cm);
        draw_line(i, height_on_screen, i, mapHeight)
        plx += dx;
        ply += dy;
    }
}
draw_text(10,10,fps);
surface_reset_target();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_surface(mapSurf,50,50);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
