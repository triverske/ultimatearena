<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = spr_fighter;
x = floor(random((global.mapSize)-20)+10);
y = floor(random((global.mapSize)-20)+10);

color = c_white;

kills = 0;
fight = 0;
water = 0;
tree  = 0;
wood = 0;
rope = 0;
stone = 0;
wspear = 0;
sspear = 0;
wbow = 0;
sbow = 0;
wanderAngle = random(360);
wanderChange = 130;
time = 0;
bathetime = 0;
otherFighter = 0;
frames = 0;

// Fighter Variables
XP     = 0; // Experience
HP     = 100; // Health        
THIRST = 100;
HUNGER = 100;
TIRED = 100;
SANITY = 100;
SANMAX = 100;
INSANE = 0;
STRENGTH = 5;
AGILITY = 5;
ENDURANCE = 5;
SKILL = 5;
LUCK = 5;
DELAY  = 0; // The amount of cycles of waiting from one command to another
QUICK  = .5;// The max movement in a cycle (in pixels)
SIGHT  = 5+SKILL; // How far a fighter can "see".
STATE  = "WANDER";
CONTINUE = 1; // How much more likely will the current action be on the next cycle?

caption = "Wandering";

DIR = floor(random(360));
alarm[0] = global.GAME_SPEED;
enemyNear = 0;
delay = 3;

foodloc[0] = 0;
foodloc[1] = 0;
waterloc[0] = 0;
waterloc[1] = 0;
commands = 0;
commandArray[0,0]="";

ai_command(STATE);


escape = false;

group = -1;
for(var i=1; i&lt;global.fighters+1; i++){
    opinion[i] = 5;
}

//INVENTORY
/*
0.  Land Mine(3)
1.  Booby Trap(3)
2.  Food(3)
3.  (Water)(can't hold unless supplied)
4.  Wooden Spear(1)
5.  Steel Spear(1)
6.  Wooden Bow(1)
7.  Steel Bow(1)
8.  Medkit(3)
9.  Wood(3)
10. Rope(3)
11. Stone(3)
12. 
13. 
14. 
15. 
16. 
17.
18.
19.
*/
for(i=0;i&lt;20;i++)
{
    INV[i] = 0;
}
wspearid = 0;
sspearid = 0;
wbowid = 0;
sbowid = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///3D Stuff

bufferReady = false;
alarm[2] = 2;
z = 0;
ang = 0;
cameraFollow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.DEATH_STRING = global.DEATH_STRING + string_upper(NAME) + "  ";
global.DEATH_ARRAY[fighterID] = 1;
global.fighters_remaining--;
obj_sideMenu.xpArray[fighterID]=0;
obj_sideMenu.sanityArray[fighterID]=101;
global.fighter_place[global.fighters_remaining+1] = fighterID;
show_debug_message(global.NAMES[fighterID] + " gets place " + string(global.fighters_remaining+1));
playDeathSound(fighterID);

global.deadday[fighterID] = "Died Day " + string(global.TIME_DAYS);

with(obj_arenaController)
{
    ds_list_add(newsFightersDead,other.fighterID);
}

with(obj_fighter)
{  
    if(distance_to_object(other) &lt; SIGHT)
        SANITY-= (floor(random(10)));
}
    
if(global.fighters_remaining == 1)
    instance_create(0,0,obj_winScreen);
    
instance_create(x,y,obj_deadLocation);

global.DEADLOC[fighterID,0] = x;
global.DEADLOC[fighterID,1] = y;
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
vertex_format_begin();
vertex_format_add_position_3d();
vertex_format_add_textcoord();
vertFormat = vertex_format_end();

terrainHeight = 128;
z = buffer_get_height(obj_maptest.hBuff,x,y) * terrainHeight / 255;

texture = sprite_get_texture(spr_fighter3d,0);

vertexBuffer = vertex_create_buffer();
vertex_begin(vertexBuffer,vertFormat);
    
//tri 1
vertex_position_3d(vertexBuffer,-8,0,0+16);
vertex_texcoord(vertexBuffer,0,0);
vertex_position_3d(vertexBuffer,-8,0,0);
vertex_texcoord(vertexBuffer,0,1);
vertex_position_3d(vertexBuffer,8,0,0+16);
vertex_texcoord(vertexBuffer,1,0);

//tri 2
vertex_position_3d(vertexBuffer,8,0,0+16);
vertex_texcoord(vertexBuffer,1,0);
vertex_position_3d(vertexBuffer,-8,0,0);
vertex_texcoord(vertexBuffer,0,1);
vertex_position_3d(vertexBuffer,8,0,0);
vertex_texcoord(vertexBuffer,1,1);

vertex_end(vertexBuffer);
vertex_freeze(vertexBuffer);

bufferReady = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time++;
direction = DIR;
commands = 0;
DELAY--;
frames--;
alarm[0] = global.GAME_SPEED;
alarm[1] = 2;
speed = random(QUICK) * (global.extraFrames+1);

ai_submit_command(STATE,CONTINUE); 

var shrink = 0;
with(obj_arenaShrink)
{
    if(!point_in_circle(other.x,other.y,x,y,radius))
    {
        other.HP -= random(.1);
        shrink = 1;
    }
}

if(HP &lt; 0)
{
    if(shrink)
    {
        global.deathCause[fighterID] = "Death by Shrinking Arena";
        update_create(update_get_text("shrink",fighterID),fighterID,1);
    }
    else
    {
        update_create(global.NAMES[fighterID]  + " was killed by the guardians.",fighterID,1);
    }
    
    instance_destroy();
    
}

//Determine time based stats
if(STATE == "SLEEP")
{
    if(time%(40+ENDURANCE*5) == 0)
    {
        THIRST-=floor(random(3));
    }
    if(time%floor(17500/HUNGER) == 0)
    {
        HUNGER-=floor(random(3));
    }    
    if(time%(34-ENDURANCE) == 0 &amp;&amp; TIRED &lt; 100)
        TIRED+=floor(random(3))
    if(time%(53-ENDURANCE*2) == 0 &amp;&amp; HP &lt; 100)
        HP+=floor(random(3));
    if (SANITY &lt; SANMAX &amp;&amp; time%360 == 0)
        SANITY+=1;
}
else{
    if(time%(170+ENDURANCE*18) == 0)
        THIRST-=floor(random(3));
    if(time%floor((50000/(HUNGER+2))-130) == 0)
        {
            HUNGER-=floor(random(3));
        }
    if(time%(48+ENDURANCE*2) == 0)
        TIRED-=floor(random(3));
    if (HUNGER &lt; 30 || THIRST &lt; 30)
    {
        if(time%(35+ENDURANCE*2) == 0)
        {
            if(time%2 == 0)
            {
                SANMAX-=floor(random(3));
                SANITY-=floor(random(3));
            }
            else
                SANITY-=floor(random(3));
        }
        if(time%(235+ENDURANCE*5) == 0)
            HP-=floor(random(3));
    }
    else if (HUNGER &lt; 50 || THIRST &lt; 50)
    {
        if(time%(235+ENDURANCE*5) == 0)
            HP-=floor(random(3));
    }
    else if(time%(96-ENDURANCE*2) == 0 &amp;&amp; HP &lt; 100)
        HP+=floor(random(3));
}    
if(time%360 == 0)
{
    SANITY-=irandom(3);
    SANMAX-=irandom(3);
}
//check stats for negative values
if (SANITY &lt; 0)
    INSANE = 1;
else
    INSANE = 0;
    
if(SANITY &lt; -50)
    global.INSANE = 1;
    
if (HUNGER &lt; 1)
{
    drop_items();
    global.deathCause[fighterID] = "Death by starvation";
    instance_destroy();
    update_create(update_get_text("die_hunger",fighterID),fighterID,1);
}
else if (THIRST &lt; 1)
{
    drop_items();
    global.deathCause[fighterID] = "Death by dehydration";
    instance_destroy();
    update_create(update_get_text("die_thirst",fighterID),fighterID,1);
}
//check if group still exists
if(global.fighterGroups &amp;&amp; group != -1)
{
    if(group == id)
    {
        var c = 0;
        with(obj_fighter)
            if(group == other.group &amp;&amp; id != other.id)
                c = 1;
                
        if(c==0)
            group = -1;
    }
    else
    {
        if(!instance_exists(group))
        {
            with(obj_fighter)
                if(group == other.group &amp;&amp; id != other.id)
                    group = other.id;
            
            group = id;
        }
    }
}
//check if only group left
if(global.fighterGroups &amp;&amp; group == id)
{
    var c = 0;
    with(obj_fighter)
    {
        if(group != other.group)
            c = 1;
    }
    if(c==0)
    {
        ai_submit_command("END GROUP",5);
    }
}
//Send Commands
ai_submit_command("WANDER",1);
ai_submit_command("WAIT",1);

if(irandom(100) == 1)
    ai_submit_command("THINK",1);
if(irandom(10000) == 1)
    ai_submit_command("THINK RARE",1);
    
if (TIRED &lt; 30)
    ai_submit_command("SLEEP",30);
if (TIRED &lt; 0)
    ai_submit_command("SLEEP",60);
    
if(HUNGER &lt; 50 &amp;&amp; INV[2] &gt; 0)
    ai_submit_command("EAT",20);
else if(HUNGER &lt; 70 &amp;&amp; INV[2] &gt; 0)
    ai_submit_command("EAT",5);
    
if(INV[3] &gt; 0)
{
    if(THIRST &lt; 10)
        ai_submit_command("DRINK SUPPLY",100);
    else if(THIRST &lt; 50)
        ai_submit_command("DRINK SUPPLY",20);
    else if(THIRST &lt; 70)
        ai_submit_command("DRINK SUPPLY",5);
}

if(HP &lt; 25 &amp;&amp; INV[8] &gt; 0)
    ai_submit_command("USE MEDKIT", 30);
else if(HP &lt; 50 &amp;&amp; INV[8] &gt; 0)
    ai_submit_command("USE MEDKIT", 10);
    
if(INV[2] &gt; 0 &amp;&amp; INV[10] &gt; 0 &amp;&amp; INV[8] &lt; 3)
    ai_submit_command("MAKE MEDKIT", 15);
if(INV[2] &gt; 0 &amp;&amp; INV[10] &gt; 0 &amp;&amp; INV[8] &lt; 3 &amp;&amp; HP &lt; 50)
    ai_submit_command("MAKE MEDKIT", 15);
if(INV[9] &gt; 0 &amp;&amp; INV[11] &gt; 0 &amp;&amp; INV[4] &lt; 1)
    ai_submit_command("MAKE SPEAR", 30);
if(INV[9] &gt; 0 &amp;&amp; INV[10] &gt; 0 &amp;&amp; INV[6] &lt; 1)
    ai_submit_command("MAKE BOW", 30);
if(INV[10] &gt; 0 &amp;&amp; INV[11] &gt; 0 &amp;&amp; INV[1] &lt; 3)
    ai_submit_command("MAKE TRAP", 30);
    
if(INV[0] &gt; 0)
    if(irandom(20) == 0)
        ai_submit_command("PLACE MINE", 1);
        
if(INV[1] &gt; 0)
    if(irandom(20) == 0)
        ai_submit_command("SET TRAP", 1);
    
instance_deactivate_object(self);
var c = instance_nearest(x,y-5,obj_fighter);
instance_activate_object(self);
var d = distance_to_object(c);
otherFighter = c;

if(instance_exists(c))
{
if(global.fighterGroups &amp;&amp; d&lt;SIGHT &amp;&amp; c.group==-1 &amp;&amp; opinion[c.fighterID]&gt;0 &amp;&amp; c.opinion[fighterID]&gt;0 &amp;&amp; !(INSANE^c.INSANE))
{
    if(irandom(LUCK)!=0)
    {
        ai_submit_command("GROUP UP",20);
    }
}
if(!global.fighterGroups || (group!=c.group || (group==-1 || INSANE &amp;&amp; irandom(10)==0)))
{
    if(d &lt; SIGHT)
    {
        ai_submit_command("OBSERVE",20);
    
        if(INV[4] &gt; 0)
            ai_submit_command("ATTACK WSPEAR",150);
        if(INV[5] &gt; 0)
            ai_submit_command("ATTACK SSPEAR",200);
        
        if(HP &gt; 20 - (100 - SANITY) / 5)
            ai_submit_command("CHASE",50);
        else if(group!=c.group)
            ai_submit_command("RUN",45);
    }
    if(d &lt; 2*SIGHT)
    {
        if(INV[6] &gt; 0)
            ai_submit_command("ATTACK WBOW",LUCK*30);
    }
    if(d &lt; 3*SIGHT)
    {
        if(INV[7] &gt; 0)
            ai_submit_command("ATTACK SBOW",LUCK*40);
    }
    if (fight)
    {     
        if(INV[4] == 0 &amp;&amp; INV[5] == 0 &amp;&amp; INV[6] == 0 &amp;&amp; INV[7] == 0)
            ai_submit_command("ATTACK UNARMED",100);
        if (water)
            ai_submit_command("ATTACK DROWN",5 + (5*LUCK));
    }
}
}

if (INSANE = 1)
{
    ai_submit_command("SUICIDE",5);
    if(SKILL &gt; 4)
    {
        if(instance_exists(c))
            ai_submit_command("HUNT", 50);
    }
}
   
if (water)
{
    if(THIRST &lt; 10)
        ai_submit_command("DRINK",100);
    else if(THIRST &lt; 50)
        ai_submit_command("DRINK",20);
    else if(THIRST &lt; 70)
        ai_submit_command("DRINK",5);
    if(time &gt; bathetime+360)
        ai_submit_command("BATHE",1);
}
if (tree)
{
    if(INV[2]&lt;3)
        ai_submit_command("GET FOOD",30);
}
if (wood)
{
    if(INV[9]&lt;3)
        ai_submit_command("GET WOOD",30);
}
if (rope)
{
    if(INV[10]&lt;3)
        ai_submit_command("GET ROPE",30);
}
if (stone)
{
    if(INV[11]&lt;3)
        ai_submit_command("GET STONE",30);
}
/*if (wspear)
{
    if(INV[4]&lt;1)
        ai_submit_command("GET WSPEAR", 50);
}
if (sspear)
{
    if(INV[5]&lt;1)
        ai_submit_command("GET SSPEAR", 50);
}
if (wbow)
{
    if(INV[6]&lt;1)
        ai_submit_command("GET WBOW", 50);
}
if (sbow)
{
    if(INV[7]&lt;1)
        ai_submit_command("GET SBOW", 50);
}*/

var waterNear0 = 0;
var waterNear1 = 0;
for(var i=max(round((x-SIGHT)/2),0); i&lt;min(round((x+SIGHT)/2),256); i++){
    for(var j=max(round((y-SIGHT)/2),0); j&lt;min(round((y+SIGHT)/2),256); j++){
        if(global.grid[i,j] == 0 &amp;&amp; abs(round(x/2)-i)+abs(round(y/2)-j)&lt;abs(round(x/2)-waterNear0)+abs(round(y/2)-waterNear1)){
            waterNear0 = i;
            waterNear1 = j;
        }
    }
}
if(!(waterNear0==0 &amp;&amp; waterNear1==0) &amp;&amp; SKILL &gt; 2)
{
    waterloc[0] = waterNear0*2;
    waterloc[1] = waterNear1*2;
}
var foodNear = instance_nearest(x,y-5,obj_tree);
if(foodNear != noone &amp;&amp; point_distance(x,y-5,foodNear.x,foodNear.y) &lt; SIGHT &amp;&amp; foodNear.foodcount &gt; 0 &amp;&amp; SKILL &gt; 2)
{
    foodloc[0] = foodNear.x;
    foodloc[1] = foodNear.y;
}

else if(THIRST &lt; 50 &amp;&amp; INV[3] &lt; 1 &amp;&amp; !(waterloc[0]==0 &amp;&amp; waterloc[1]==0))
    ai_submit_command("WATER SEARCH",67);
else if(HUNGER &lt; 50 &amp;&amp; INV[2] &lt; 1 &amp;&amp; !(foodloc[0]==0 &amp;&amp; foodloc[1]==0))
    ai_submit_command("FOOD SEARCH",67);

//Check for escape
var esc = irandom(100000)
if(x &gt; 490 || x &lt; 10  || y &gt; 490 || y &lt; 10) //Make sure fighter doesn't leave arena
{
    if (!escape) 
    {
        

        if (esc &lt; 480)
        {
            global.deathCause[fighterID] = "Death by failed escape attempt";
            instance_destroy();
            update_create(update_get_text("arena_escape_fail",fighterID),fighterID,1);
        }
        else if (esc &lt; 490)
        {
            global.deathCause[fighterID] = "Death by failed escape attempt";
            instance_destroy();
            update_create(global.NAMES[fighterID]  + " was killed by the guardians.",fighterID,1);
        }
        else if (esc &lt; 492)
        {
            global.WILD_RIDE = 1;
            global.deathCause[fighterID] = "Death by failed escape attempt";
            instance_destroy();
            update_create(global.NAMES[fighterID]  + " died trying to get off Mr. Troy's Wild Ride!",fighterID,1);
        }
        
        //speed = -1;
        //DIR -= (floor(random(40)) + 160)
    }
}

//reset position checks
fight = 0;
water = 0;
tree = 0;
wood = 0;
rope = 0;
stone = 0;
wspear = 0;
sspear = 0;
wbow = 0;
sbow = 0;


//pick command
if (DELAY &lt; 1)
    ai_command(ai_get_command());


var inc = 0;
while(true)
{
    if(inc &gt; 10) //can't find path
    {
        speed = 0;
        z = buffer_get_height(obj_maptest.hBuff,x,y) * 128 / 255;
        break;
    }
    var nx = round(clamp(x+lengthdir_x(speed,DIR),0,511));
    var ny = round(clamp(y+lengthdir_y(speed,DIR),0,511));
    
    var nz = buffer_get_height(obj_maptest.hBuff,nx,ny) * 128 / 255;
    if(cameraFollow)
        show_debug_message(string(abs(z-nz)));
    if(abs(z-nz) &lt; 5.1)
    {
        z = nz;
        speed -= clamp(abs(z-nz)*4,0,speed*.8)
        break;
    }
    else
        DIR = random(360);
    inc++;
}
    
if(frames &gt; 0)
    event_perform(ev_alarm,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frames = global.extraFrames + 1;

if (alarm[0] == -1 &amp;&amp; global.GAME_SPEED &gt; 0)
    alarm[0] = global.GAME_SPEED;

//check if on water
if(alarm[0] == 1)
{
    var rx = clamp(round(x/2),0,255);
    var ry = clamp(round(x/2),0,255);

    if(global.grid[rx,ry] == 0)
        water = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///3D Stuff

if(cameraFollow)
{
    var cx = floor(clamp(y,0,511));
    var cy = floor(clamp(512-x,0,511));
    var cz = buffer_get_height(obj_maptest.hBuff,cx,cy) * terrainHeight / 255;
    
    with(obj_mapcamera)
    {
        followFighter = other.id;
        followFighterId = other.fighterID;
        tx = smooth_approach(tx,cx,.1);
        ty = smooth_approach(ty,cy,.1);
        tz = smooth_approach(tz,cz,.1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_trap">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.owner != fighterID)
{
if(alarm[0] == 1)
{
    other.triggered = true;
    HP-=50;
    if(HP&lt;0)
    {
        if(instance_exists(other.owner))
        {
            with(other.owner)
                XP+=5;
        }
        update_m_create(update_get_multichar_text("die_trap",fighterID,other.owner,0,0),other.owner,fighterID,0,0,1);
        
        with(global.IDLIST[other.owner])
            kills++;
        global.deathCause[fighterID] = "Killed by "+global.NAMES[other.owner]+"'s trap";
        instance_destroy();
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_steelBow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    sbow = 1;
    sbowid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_woodBow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    wbow = 1;
    wbowid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_steelSpear">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    sspear = 1;
    sspearid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_woodSpear">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    wspear = 1;
    wspearid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stone">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    stone = 1;
    stoneid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_rope">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    rope = 1;
    ropeid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wood">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    wood = 1;
    woodid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_fighter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1)
{
    fight = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_landmine">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(other.owner != fighterID)
{
if(alarm[0] == 1)
{
    var t = floor(random(25));
    if(other.owner == -1){
        if (t &lt; 25-(SKILL+LUCK)){
            other.triggered = true;
            global.deathCause[fighterID] = "Death by land mine";
            update_create(update_get_text("die_mine",fighterID),fighterID,1);
            instance_destroy();
        }
        else{
            update_create(update_get_text("disarm_mine",fighterID),fighterID,0);
            with(other)
                instance_destroy();
            XP+=3;
            INV[0]++;
        }
    }
    else{
        if (t &lt; 25-(SKILL+LUCK)){
            if(instance_exists(global.IDLIST[other.owner]))
            {
                with(global.IDLIST[other.owner])
                    XP+=5;
            }
            other.triggered = true;
            global.deathCause[fighterID] = "Killed by "+global.NAMES[other.owner]+"'s land mine";
            update_m_create(update_get_multichar_text("die_mine_m",fighterID,other.owner,0,0),other.owner,fighterID,0,0,1);
            with(global.IDLIST[other.owner])
                kills++;
            global.LANDMINE_KILLS++;
            instance_destroy();
        }
        else{
            update_create(update_get_text("disarm_mine",fighterID),fighterID,0);
            with(other)
                instance_destroy();
            XP+=3;
            INV[0]++;
            
        }
    }
}
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_itemBag">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var check = 0;

if(INV[4] == 0 &amp;&amp; other.INV[4]&gt;0)
{
    wspearid = other.wspearid;
    wspearid.owner = id;
}
if(INV[5] == 0 &amp;&amp; other.INV[5]&gt;0)
{
    sspearid = other.sspearid;
    sspearid.owner = id;
}
if(INV[6] == 0 &amp;&amp; other.INV[6]&gt;0)
{
    wbowid = other.wbowid;
    wbowid.owner = id;
}
if(INV[7] == 0 &amp;&amp; other.INV[7]&gt;0)
{
    sbowid = other.sbowid;
    sbowid.owner = id;
}
    
for(i=0;i&lt;20;i++)
{
    if(i = 4 || i = 5 || i = 6 || i = 7)
    {
        if(INV[i]+other.INV[i] &gt; 1)
        {
            INV[i] = 1;
            other.INV[i] = INV[i]+other.INV[i]-1;
            check = 1;
        }
    }
    else if(INV[i]+other.INV[i] &gt; 3)
    {
        INV[i] = 3;
        other.INV[i] = INV[i]+other.INV[i]-3;
        check = 1;
    }
    else
        INV[i]+=other.INV[i];
}

if(check == 0)
{
    with(other)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_tree">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(alarm[0] == 1 &amp;&amp; other.foodcount &gt;0)
{
    tree = 1;
    treeid = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
